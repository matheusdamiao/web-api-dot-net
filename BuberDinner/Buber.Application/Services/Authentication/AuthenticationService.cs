using Buber.Application.Common.Interfaces.Authentication;
using Buber.Application.Services.Persistence;
using Buber.Domain.Entities;

namespace Buber.Application.Services.Authentication;


public class AuthenticationService : IAuthenticationService
{

    private readonly IJwtTokenGenerator _jwtTokenGenerator;
    private readonly IUserRepository _userRepository;

    public AuthenticationService(IJwtTokenGenerator jwtTokenGenerator, IUserRepository userRepository)
    {
        _jwtTokenGenerator = jwtTokenGenerator;
        _userRepository = userRepository;
    }


    public AuthenticationResult Register(string firstName, string lastName, string email, string password)
    {

        // 1. Validate the user doesn't exist

        if (_userRepository.GetUserByEmail(email) is not null)
        {

            throw new Exception("User with given email already exists.");
        }

        // 2. Create user (generate unique ID) and persist to DB

        var user = new User
        {
            FirstName = firstName,
            LastName = lastName,
            Email = email,
            Password = password

        };

        _userRepository.Add(user);

        // 3. Create JWT Token

        // ID is now generated by User entity
        //  var id = Guid.NewGuid();
        var token = _jwtTokenGenerator.GenerateToken(user.Id, firstName, lastName);


        return new AuthenticationResult(
            user.Id,
            firstName,
            lastName,
            email,
            token);
    }
    public AuthenticationResult Login(string email, string password)
    {

        // 1. Check if user does exist

        if (_userRepository.GetUserByEmail(email) is not User user)
        {

            throw new Exception("User with given email does not exist");
        }

        // 2. Validate the password is correct

        if (user.Password != password)
        {
            throw new Exception("Invalid password.");
        }

        var token = _jwtTokenGenerator.GenerateToken(user.Id, user.FirstName, user.LastName);

        return new AuthenticationResult(
            user.Id,
            user.FirstName,
            user.LastName,
            email,
            token);
    }


}